// Storing instructions sequentially in a 2D array
        //60-address of exit
        memory[0] = 8'b10000011; // ld x3, 0(x15)    x3-a=0
        memory[1] = 8'b10110001;
        memory[2] = 8'b00000111;
        memory[3] = 8'b00000000;
        
        memory[4] = 8'b00000011; // ld x4, 16(x15) 
        memory[5] = 8'b10110010;
        memory[6] = 8'b10000111;
        memory[7] = 8'b00000000;

        memory[8] = 8'b00000011; // ld x30, 8(x15)
        memory[9] = 8'b10111111;
        memory[10] = 8'b00000111;
        memory[11] = 8'b00000001;
 // ld x30, 16(x15)

  // ld x30, 16(x15) // ld x30, 16(x14)   x6=n
        memory[12] = 8'b01100011; // beq x10 x30 
        memory[13] = 8'b00000111;
        memory[14] = 8'b10101111;
        memory[15] = 8'b00000000;

        memory[16]=  8'b10110011 ;// add x7 x3 x4 
        memory[17]=  8'b10000011 ;
        memory[18]=  8'b01000001;
        memory[19]=  8'b00000000;

        memory[20] = 8'b10110011; // add x3, x4, x0 
        memory[21] = 8'b00000001;
        memory[22] = 8'b00000010;
        memory[23] = 8'b00000000;

        memory[24] = 8'b00110011; // add x4, x7, x0
        memory[25] = 8'b10000010; 
        memory[26] = 8'b00000011; 
        memory[27] = 8'b00000000; 

        memory[28] = 8'b10010011; // add x11, x10, 1
        memory[29] = 8'b00000101;
        memory[30] = 8'b00010101;
        memory[31] = 8'b00000000;

        memory[32] = 8'b00110011; // add x10, x11, x0
        memory[33] = 8'b10000101;
        memory[34] = 8'b00000101;
        memory[35] = 8'b00000000;

        memory[36] = 8'b11100011; // beq x0, x0, -6 // beq x0, x0, -5
        memory[37] = 8'b00001010;
        memory[38] = 8'b00000000;
        memory[39] = 8'b11111110;

        memory[40] = 8'b11111111; // EXIT (111111 opcode for finish)
        memory[41] = 8'b11111111;
        memory[42] = 8'b11111111;
        memory[43] = 8'b11111111;